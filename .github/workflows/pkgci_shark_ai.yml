# Copyright 2024 Advanced Micro Devices, Inc.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: PkgCI - shark-ai

on:
  workflow_call:
    inputs:
      artifact_run_id:
        type: string
        default: ""
  workflow_dispatch:
    inputs:
      artifact_run_id:
        type: string
        description: "Id for a workflow run that produced dev packages"
        default: ""

jobs:
  smoke_test:
    name: "Smoke Test (${{ matrix.name }})"
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: cpu
            runs-on: ubuntu-24.04
            test_device: cpu
            python-version: 3.11
          - name: amdgpu_rocm_mi300_gfx942
            runs-on: linux-mi300-1gpu-ossci-nod-ai
            test_device: gfx942
            python-version: 3.11
    defaults:
      run:
        shell: bash
    env:
      PACKAGE_DOWNLOAD_DIR: ${{ github.workspace }}/.packages
      VENV_DIR: ${{ github.workspace }}/.venv
    steps:
      - name: Run rocminfo
        if: contains(matrix.test_device, 'gfx')
        run: rocminfo
      - name: "Checkout Code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: "Set up environment and install PkgCI Artifacts"
        uses: ./.github/actions/pkgci-setup
        with:
          python-version: ${{matrix.python-version}}
          artifact-run-id: ${{ inputs.artifact_run_id }}
      - name: Run LLM Smoke Test
        run: |
          source ${VENV_DIR}/bin/activate
          pytest -v --test_device=${{ matrix.test_device }} \
            --junitxml=smoke-test-${{ matrix.name }}.xml \
            app_tests/integration_tests/llm/shortfin/tinystories_llama2_25m_test.py \
            --log-cli-level=INFO
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: smoke-test-${{ matrix.name }}
          path: smoke-test-${{ matrix.name }}.xml


  direct_to_batcher_test:
    name: "Direct to Batcher Test (${{ matrix.name }})"
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: cpu
            runs-on: azure-cpubuilder-linux-scale
            test_device: cpu
            python-version: 3.11
          - name: amdgpu_rocm_mi300_gfx942
            runs-on: linux-mi300-1gpu-ossci-nod-ai
            test_device: gfx942
            python-version: 3.11
    defaults:
      run:
        shell: bash
    env:
      PACKAGE_DOWNLOAD_DIR: ${{ github.workspace }}/.packages
      VENV_DIR: ${{ github.workspace }}/.venv
    steps:
      - name: Run rocminfo
        if: contains(matrix.test_device, 'gfx')
        run: rocminfo
      - name: "Checkout Code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: "Set up environment and install PkgCI Artifacts"
        uses: ./.github/actions/pkgci-setup
        with:
          python-version: ${{matrix.python-version}}
          artifact-run-id: ${{ inputs.artifact_run_id }}
      - name: Run Direct-to-batcher Test
        run: |
          source ${VENV_DIR}/bin/activate
          pytest -v -s --test_device=${{ matrix.test_device }} \
            --junitxml=direct-to-batcher-test-${{ matrix.name }}.xml \
            app_tests/integration_tests/llm/shortfin/direct_to_batcher_test.py \
            --log-cli-level=INFO
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: direct-to-batcher-test-${{ matrix.name }}
          path: direct-to-batcher-test-${{ matrix.name }}.xml


  integration_test:
    name: "Integration Test (${{ matrix.name }})"
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: cpu
            runs-on: azure-cpubuilder-linux-scale
            test_device: cpu
            python-version: 3.11
          - name: amdgpu_rocm_mi300_gfx942
            runs-on: linux-mi300-1gpu-ossci-nod-ai
            test_device: gfx942
            python-version: 3.11
    defaults:
      run:
        shell: bash
    env:
      PACKAGE_DOWNLOAD_DIR: ${{ github.workspace }}/.packages
      VENV_DIR: ${{ github.workspace }}/.venv
    steps:
      - name: Run rocminfo
        if: contains(matrix.test_device, 'gfx')
        run: rocminfo
      - name: "Checkout Code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: "Set up environment and install PkgCI Artifacts"
        uses: ./.github/actions/pkgci-setup
        with:
          python-version: ${{matrix.python-version}}
          artifact-run-id: ${{ inputs.artifact_run_id }}
      - name: Run LLM Integration Tests
        run: |
          source ${VENV_DIR}/bin/activate
          pytest -v --test_device=${{ matrix.test_device }} \
            --junitxml=integration-test-${{ matrix.name }}.xml \
            app_tests/integration_tests/llm/shortfin/open_llama_3b_llm_server_test.py \
            --log-cli-level=INFO
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: integration-test-${{ matrix.name }}
          path: integration-test-${{ matrix.name }}.xml

  # TODO: Figure out how to publish one summary over many pytest runs. This current test summary action doesn't work due to perms problems.
  # test_summary:
  #   name: "Test Summary"
  #   needs: [smoke_test, integration_test]
  #   runs-on: ubuntu-latest
  #   if: always()
  #   steps:
  #     - name: Download Test Results
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: "*-test-*"
  #         merge-multiple: true
  #     - name: Publish Test Results
  #       uses: EnricoMi/publish-unit-test-result-action@v2
  #       with:
  #         junit_files: "*-test-*.xml"
  #         comment_mode: off
